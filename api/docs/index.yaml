openapi: 3.0.1
info:
  version: 1.0.0
  title: Lambda Notes API Documentation
tags:
  - name: attachments
    description: Manage links to uploaded attachments
  - name: comments
    description: Create and manage comments within tasks
  - name: projects
    description: Create and manage projects
  - name: subtasks
    description: Create and manage subtasks for checklists in tasks
  - name: tags
    description: Create and manage tags within projects
  - name: tasks
    description: Create and manage tasks within projects
  - name: users
    description: Create and manage users and user settings. Handle user sessions.
paths:
  /api/attachments:
    post:
      tags:
        - attachments
      summary: Create a new attachment
      operationId: createAttachment
      requestBody:
        description: New attachment object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Attachment'
      responses:
        '201':
          description: Successfully created new attachment
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Attachment'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/attachments/{attachmentId}:
    delete:
      tags:
        - attachments
      summary: Delete an attachment
      operationId: deleteAttachment
      parameters:
        - $ref: '#/components/parameters/attachmentId'
      responses:
        '200':
          description: Successfully deleted attachment
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b347ac4beac9f299e644244
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/comments:
    post:
      tags:
        - comments
      summary: Create a new comment
      operationId: createComment
      requestBody:
        description: New comment object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Comment'
      responses:
        '201':
          description: Successfully created new comment
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Comment'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/comments/{commentId}:
    put:
      tags:
        - comments
      summary: Update an existing comment. Replaces entire object.
      operationId: updateComment
      requestBody:
        description: Updated comment object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Comment'
      parameters:
        - $ref: '#/components/parameters/commentId'
      responses:
        '200':
          description: Successfully updated comment
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Comment'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    delete:
      tags:
        - comments
      summary: Delete a comment
      operationId: deleteComment
      parameters:
        - $ref: '#/components/parameters/commentId'
      responses:
        '200':
          description: Successfully deleted comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b3472c43d17952525612f9a
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/projects:
    post:
      tags:
        - projects
      summary: Create a new project
      description: This creates a new project. It can only be performed by an authenticated user.
      operationId: createProject
      requestBody:
        description: New project object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Project'
      responses:
        '201':
          description: Successfully created new project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: objectId
                  title:
                    type: string
                  description:
                    type: string
                example:
                  _id: 5b33c45d8d8bf66d4d44f1ec
                  title: Example Project 1
                  description: An example description.
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
    get:
      tags:
        - projects
      summary: Get all existing projects
      operationId: getAllProjects
      responses:
        '200':
          description: Successfully returned array of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      format: objectId
                    title:
                      type: string
                    members:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            format: objectId
                          firstName:
                            type: string
                          lastName:
                            type: string
                example:
                  - _id: 5b31ea59d62eb33eb93014e7
                    title: Example Project 1
                    members:
                    - _id: 5b31ce106d04832fd1e51f59
                      firstName: John
                      lastName: Smith
                    - _id: 5b31ce106d04832fd1e51f71
                      firstName: Jane
                      lastName: Smith
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/projects/{projectId}:
    get:
      tags:
        - projects
      summary: Get project by id
      operationId: getProjectById
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Successfully returned project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: objectId
                        firstName:
                          type: string
                        lastName:
                          type: string
                example:
                  _id: 5b33c45d8d8bf66d4d44f1ec
                  title: Example Project 2
                  description: An example project description.
                  members:
                  - _id: 5b31ce106d04832fd1e51f59
                    firstName: John
                    lastName: Smith
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    put:
      tags:
        - projects
      summary: Update an existing project. Replaces entire object.
      operationId: updateProject
      requestBody:
        description: Updated project object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Project'
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Successfully updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: objectId
                        firstName:
                          type: string
                        lastName:
                          type: string
                example:
                  _id: 5b33c45d8d8bf66d4d44f1ec
                  title: Example Project 2
                  description: An example project description.
                  members:
                  - _id: 5b31ce106d04832fd1e51f59
                    firstName: John
                    lastName: Smith
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    delete:
      tags:
        - projects
      summary: Delete a project
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Successfully deleted project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b31ea59d62eb33eb93014e7
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/projects/{projectId}/tags:
    get:
      tags:
        - projects
      summary: Get tags by project id
      operationId: getTagsByProjectId
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Successfully returned array of tags for specified project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Tag'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/subtasks:
    post:
      tags:
        - subtasks
      summary: Create a new subtask
      operationId: createSubtask
      requestBody:
        description: New subtask object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Subtask'
      responses:
        '201':
          description: Successfully created new subtask
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Subtask'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/subtasks/{subtaskId}:
    put:
      tags:
        - subtasks
      summary: Update an existing subtask. Replaces entire object.
      operationId: updateSubtask
      requestBody:
        description: Updated subtask object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Subtask'
      parameters:
        - $ref: '#/components/parameters/subtaskId'
      responses:
        '200':
          description: Successfully updated subtask
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Subtask'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    delete:
      tags:
        - subtasks
      summary: Delete a subtask
      operationId: deleteSubtask
      parameters:
        - $ref: '#/components/parameters/subtaskId'
      responses:
        '200':
          description: Successfully deleted subtask
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b346872f7f83a206b0aeee7
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/tags:
    post:
      tags:
        - tags
      summary: Create a new tag
      operationId: createTag
      requestBody:
        description: New tag object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Tag'
      responses:
        '201':
          description: Successfully created new project
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Tag'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/tags/{tagId}:
    put:
      tags:
        - tags
      summary: Update an existing tag. Replaces entire object.
      operationId: updateTag
      requestBody:
        description: Updated tag object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Tag'
      parameters:
        - $ref: '#/components/parameters/tagId'
      responses:
        '200':
          description: Successfully updated tag
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Tag'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    delete:
      tags:
      - tags
      summary: Delete a tag
      operationId: deleteTag
      parameters:
        - $ref: '#/components/parameters/tagId'
      responses:
        '200':
          description: Successfully deleted tag
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b34370580f5b90ff8494ac4
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/tasks:
    post:
      tags:
        - tasks
      summary: Create a new task
      operationId: createTask
      requestBody:
        description: New task object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Task'
      responses:
        '201':
          description: Successfully created new task
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Task'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
    get:
      tags:
        - tasks
      summary: Get all existing tasks
      operationId: getAllTasks
      responses:
        '200':
          description: Successfully returned array of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Task'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/tasks/{taskId}:
    get:
      tags:
        - tasks
      summary: Get task by id
      operationId: getTaskById
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Successfully returned task
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Task'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    put:
      tags:
        - tasks
      summary: Update an existing task. Replaces entire object.
      operationId: updateTask
      requestBody:
        description: New task object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Task'
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Successfully updated task
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Task'
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    delete:
      tags:
        - tasks
      summary: Delete a task
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Successfully deleted task
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b33e2dfc55019773e08217d
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/tasks/{taskId}/subtasks:
    get:
      tags:
        - tasks
      summary: Get subtasks by task id
      operationId: getSubtasksByTaskId
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Successfully returned array of subtasks for specified task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Subtask'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/tasks/{taskId}/comments:
    get:
      tags:
        - tasks
      summary: Get comments by task id
      operationId: getCommentsByTaskId
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Successfully returned array of comments for specified task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Comment'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/tasks/{taskId}/attachments:
    get:
      tags:
        - tasks
      summary: Get attachments by task id
      operationId: getAttachmentsByTaskId
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Successfully returned array of attachments for specified task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Attachment'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/users:
    get:
      tags:
        - users
      summary: Get all existing users
      description: This returns a list of all users. It can only be performed by an authenticated user.
      operationId: getAllUsers
      responses:
        '200':
          description: Successfully returned array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                example:
                - _id: 5b31ce106d04832fd1e51f59
                  firstName: John
                  lastName: Smith
                  email: johnsmith@example.com
                - _id: 5b31ce106d04832fd1e51f71
                  firstName: Jane
                  lastName: Smith
                  email: janesmith@example.com
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/users/register:
    post:
      tags:
        - users
      summary: Create a new user
      description: This creates a new user, ideally with data submitted via a form. Returns a token to make further requests.
      operationId: createUser
      requestBody:
        description: New user object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      responses:
        '201':
          description: Successfully created new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  token:
                    type: string
                    format: jsonWebToken
                example:
                  name: John Smith
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c@example.com
        '400':
          $ref: '#components/responses/400BadRequest'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/users/login:
    post:
      tags:
        - users
      summary: Log user in
      description: This allows registered users to log into the system and recieve a token to make further requests
      operationId: loginUser
      requestBody:
        description: User credentials
        required: 'true'
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              example:
                email: johnsmith@example.com
                password: Password@1
      responses:
        '200':
          description: Successfully logged user in
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  token:
                    type: string
                    format: jsonWebToken
                example:
                  name: John Smith
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c@example.com
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '500':
          $ref: '#components/responses/500InternalServerError'
  /api/users/{userId}:
    get:
      tags:
        - users
      summary: Get user by id
      description: This returns a single user. It can only be performed by an authenticated user.
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Successfully returned user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                example:
                  _id: 5b31ce106d04832fd1e51f59
                  firstName: John
                  lastName: Smith
                  email: johnsmith@example.com
        '401':
          $ref: '#components/responses/401Unauthorized'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    put:
      tags:
        - users
      summary: Update an existing user. Replaces entire object.
      description: This updates a user profile. It can only be performed by an authenticated user and users may only edit their own profile.
      operationId: updateUser
      requestBody:
        description: Updated user object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                example:
                  _id: 5b31ce106d04832fd1e51f59
                  firstName: John
                  lastName: Smith
                  email: johnsmith@example.com
        '400':
          $ref: '#components/responses/400BadRequest'
        '401':
          $ref: '#components/responses/401Unauthorized'
        '403':
          $ref: '#components/responses/403Forbidden'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
    delete:
      tags:
        - users
      summary: Deletes a user
      description: This deletes a user. It can only be performed by an authenticated user and users may only delete their own profile.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Successfully deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b31ce106d04832fd1e51f59
        '401':
          $ref: '#components/responses/401Unauthorized'
        '403':
          $ref: '#components/responses/403Forbidden'
        '404':
          $ref: '#components/responses/404NotFound'
        '500':
          $ref: '#components/responses/500InternalServerError'
components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    Attachment:
      title: Attachment
      required:
        - task
        - name
        - link
      properties:
        task:
          description: Id of existing task that attachment belongs to
          type: string
          format: objectId
          example: 5b33e5328f5db17933878482
        name:
          description: Name of attached file
          type: string
          example: home-page-mockup.pdf
        link:
          description: Cloud storage link for saved file
          type: string
          example: https://example.s3.amazonaws.com/attachment.pdf
    Comment:
      title: Comment
      required:
        - task
        - comment
        - author
        - date
      properties:
        task:
          description: Id of existing task that comment belongs to
          type: string
          format: objectId
          example: 5b33e5328f5db17933878482
        comment:
          description: Comment body
          type: string
          example: An example comment.
        author:
          description: User id of person who wrote the comment
          type: string
          format: objectId
          example: 5b1ed13e8cea93c6ba72b1da
        date:
          description: Date the comment was posted
          type: string
          format: date
          example: 06/27/2018
    Project:
      title: Project
      required:
        - title
        - members
      properties:
        title:
          description: Descriptive title for project
          type: string
          example: Example Project 1
        description:
          description: Additional details regarding project
          type: string
          example: An example description.
        members:
          description: Array of user id's assigned to project
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da', '5b1ed13e8cea93c6ba72b1db', '5b1ed13e8cea93c6ba72b1dc']
    Subtask:
      title: Subtask
      required:
        - task
        - description
        - completed
      properties:
        task:
          description: Id of existing task that subtask belongs to
          type: string
          format: objectId
          example: 5b33e5328f5db17933878482
        description:
          description: A description of the subtask
          type: string
          example: An example description.
        completed:
          description: Subtasks' completed status
          type: boolean
          default: false
          example: false
    Tag:
      title: Tag
      required:
        - project
        - description
        - color
      properties:
        project:
          description: Id of existing project that tag belongs to
          type: string
          format: objectId
          example: 5b1ed13e8cea93c6ba72b1da
        description:
          description: Descriptive title for tag
          type: string
          example: High Priority
        color:
          description: "Background color for tag. Allowed values: black, white, blue, green, red, yellow, purple"
          type: string
          example: red
    Task:
      title: Task
      required:
        - project
        - title
      properties:
        project:
          description: Id of existing project that task belongs to
          type: string
          format: objectId
          example: 5b1ed13e8cea93c6ba72b1da
        title:
          description: Descriptive title for task
          type: string
          example: An example task title
        description:
          description: Additional details regarding task
          type: string
          example: An example task description.
        assignee:
          description: Array of user id's assigned to task
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da']
        dueDate:
          description: Date the task is due
          type: string
          format: date
          example: 06/24/2018
        tags:
          description: Array of tag id's belonging to task
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da', '5b1ed13e8cea93c6ba72b1db', '5b1ed13e8cea93c6ba72b1dc']
        completed:
          description: Task's completed status
          type: Boolean
          example: false
          default: false
    User:
      title: User
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          description: User's first name
          type: string
          example: John
        lastName:
          description: User's last name
          type: string
          example: Smith
        email:
          description: User's email address
          type: string
          format: email
          example: johnsmith@example.com
        password:
          description: "User's password containing 1 uppercase letter, 1 lowercase
            letter, 1 digit and 1 special character: !, @, #, $, %, &"
          type: string
          format: password
          minLength: 8
          example: Password@1
  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  parameters:
    attachmentId:
      name: attachmentId
      in: path
      description: The attachment id assigned by the database
      required: true
      schema:
        type: string
        format: objectId
      example: 5b347ac4beac9f299e644244
    commentId:
      name: commentId
      in: path
      description: The comment id assigned by the database
      required: true
      schema:
        type: string
        format: objectId
      example: 5b3472c43d17952525612f9a
    projectId:
      name: projectId
      in: path
      description: The project id assigned by the database
      required: true
      schema:
        type: string
        format: objectId
      example: 5b33c45d8d8bf66d4d44f1ec
    subtaskId:
      name: subtaskId
      in: path
      description: The subtask id assigned by the database
      required: true
      schema:
        type: string
        format: objectId
      example: 5b346872f7f83a206b0aeee7
    tagId:
      name: tagId
      in: path
      description: The tag id assigned by the database
      required: true
      schema:
        type: string
        format: objectId
      example: 5b34370580f5b90ff8494ac4
    taskId:
      name: taskId
      in: path
      description: The task id assigned by the database
      required: true
      schema:
        type: string
        format: objectId
      example: 5b33e2dfc55019773e08217d
    userId:
      name: userId
      in: path
      description: The user id assigned by the database
      required: true
      schema:
        type: string
        format: objectId
      example: 5b31ce106d04832fd1e51f59
  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    400BadRequest:
      description: Bad request from validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            example:
              error: 'Validation failed: {ADDITIONAL DETAILS}'
    401Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            example:
              error: 'Invalid credentials'
    403Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            example:
              error: User is not authorized to perform this action.
    404NotFound:
      description: Document not found. Id does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            example:
              error: The document with the specified ID does not exist.
    500InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            example:
              error: The action could not be completed.