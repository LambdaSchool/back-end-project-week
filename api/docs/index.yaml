openapi: 3.0.1
info:
  version: 1.0.0
  title: Lambda Notes API Documentation
tags:
  - name: projects
    description: Create and manage projects
  - name: tasks
    description: Create and manage tasks within projects
  - name: users
    description: Create and manage users and user settings. Handle user sessions.
paths:
  /api/projects:
    post:
      tags:
        - projects
      summary: Create a new project
      operationId: createProject
      requestBody:
        description: New project object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Project'
      responses:
        '201':
          description: Successfully created new project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: objectId
                  title:
                    type: string
                  description:
                    type: string
                example:
                  _id: 5b33c45d8d8bf66d4d44f1ec
                  title: Task Managament App Development
                  description: An example description.
        '400':
          description: Bad request from validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: 'Project validation failed: title: Project title required'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The project could not be created.
    get:
      tags:
        - projects
      summary: Get all existing projects
      operationId: getAllProjects
      responses:
        '200':
          description: Successfully returned array of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      format: objectId
                    title:
                      type: string
                    members:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            format: objectId
                          firstName:
                            type: string
                          lastName:
                            type: string
                example:
                  - _id: 5b31ea59d62eb33eb93014e7
                    title: Example Project 1
                    members:
                    - _id: 5b31ce106d04832fd1e51f59
                      firstName: John
                      lastName: Smith
                    - _id: 5b31ce106d04832fd1e51f71
                      firstName: Jane
                      lastName: Smith
                  - _id: 5b33c45d8d8bf66d4d44f1ec
                    title: Example Project 2
                    members:
                    - _id: 5b31ce106d04832fd1e51f59
                      firstName: John
                      lastName: Smith
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The list of projects could not be retrieved.
  /api/projects/{projectId}:
    get:
      tags:
        - projects
      summary: Get project by id
      operationId: getProjectById
      parameters:
      - in: path
        name: projectId
        schema:
          type: string
        required: true
        description: The project id
      responses:
        '200':
          description: Successfully returned project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: objectId
                        firstName:
                          type: string
                        lastName:
                          type: string
                example:
                  _id: 5b33c45d8d8bf66d4d44f1ec
                  title: Example Project 2
                  description: An example project description.
                  members:
                  - _id: 5b31ce106d04832fd1e51f59
                    firstName: John
                    lastName: Smith
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The project with id {ID} could not be retrieved.
    put:
      tags:
      - projects
      summary: Update all required fields for an existing project
      operationId: updateProject
      requestBody:
        description: Updated project object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Project'
      parameters:
      - in: path
        name: projectId
        schema:
          type: string
        required: 'true'
        description: The project id
      responses:
        '200':
          description: Successfully updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: objectId
                        firstName:
                          type: string
                        lastName:
                          type: string
                example:
                  _id: 5b33c45d8d8bf66d4d44f1ec
                  title: Example Project 2
                  description: An example project description.
                  members:
                  - _id: 5b31ce106d04832fd1e51f59
                    firstName: John
                    lastName: Smith
        '400':
          description: Bad request from validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: 'Project validation failed: title: Project title required'
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The project could not be updated.
    delete:
      tags:
      - projects
      summary: Delete a project
      operationId: deleteProject
      parameters:
      - in: path
        name: projectId
        schema:
          type: string
        required: 'true'
        description: The project id
      responses:
        '200':
          description: Successfully deleted project
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b31ea59d62eb33eb93014e7
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The project with id ${ID} could not be removed.
  /api/tasks:
    post:
      tags:
        - tasks
      summary: Create a new task
      operationId: createTask
      requestBody:
        description: New task object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Task'
      responses:
        '201':
          description: Successfully created new task
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Task'
        '400':
          description: Bad request from validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: 'Task validation failed: title: Task title required'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The task could not be created.
    get:
      tags:
        - tasks
      summary: Get all existing tasks
      operationId: getAllTasks
      responses:
        '200':
          description: Successfully returned array of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Task'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The list of tasks could not be retrieved.
  /api/tasks/{taskId}:
    get:
      tags:
        - tasks
      summary: Get task by id
      operationId: getTaskById
      parameters:
      - in: path
        name: taskId
        schema:
          type: string
        required: true
        description: The task id
      responses:
        '200':
          description: Successfully returned task
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Task'
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The task with id {ID} could not be retrieved.
    put:
      tags:
        - tasks
      summary: Update all required fields for an existing task
      operationId: updateTask
      requestBody:
        description: New task object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Task'
      parameters:
      - in: path
        name: taskId
        schema:
          type: string
        required: true
        description: The task id
      responses:
        '200':
          description: Successfully updated task
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Task'
        '400':
          description: Bad request from validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: 'Task validation failed: title: Task title required'
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The task with id {ID} could not be updated.
    delete:
      tags:
        - tasks
      summary: Delete a task
      operationId: deleteTask
      parameters:
      - in: path
        name: taskId
        schema:
          type: string
        required: true
        description: The task id
      responses:
        '200':
          description: Successfully deleted task
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b33e2dfc55019773e08217d
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The task with id {ID} could not be deleted.
  /api/users:
    post:
      tags:
      - users
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: New user object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      responses:
        '201':
          description: Successfully created new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                example:
                  _id: 5b31ce106d04832fd1e51f59
                  firstName: John
                  lastName: Smith
                  email: johnSmith@example.com
        '400':
          description: Bad request from validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: 'User validation failed: email: {EMAIL} is not a valid email
                    address'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The user could not be created.
    get:
      tags:
      - users
      summary: Get all existing users
      operationId: getAllUsers
      responses:
        '200':
          description: Successfully returned array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                example:
                - _id: 5b31ce106d04832fd1e51f59
                  firstName: John
                  lastName: Smith
                  email: johnSmith@example.com
                - _id: 5b31ce106d04832fd1e51f71
                  firstName: Jane
                  lastName: Smith
                  email: janeSmith@example.com
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The list of users could not be retrieved.
  /api/users/{userId}:
    get:
      tags:
      - users
      summary: Get user by id
      operationId: getUserById
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: 'true'
        description: The user id
      responses:
        '200':
          description: Successfully returned user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                example:
                  _id: 5b31ce106d04832fd1e51f59
                  firstName: John
                  lastName: Smith
                  email: johnSmith@example.com
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The user with id {ID} could not be retrieved.
    put:
      tags:
      - users
      summary: Update all required fields for an existing user
      operationId: updateUser
      requestBody:
        description: Updated user object
        required: 'true'
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: 'true'
        description: The user id
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                example:
                  _id: 5b31ce106d04832fd1e51f59
                  firstName: John
                  lastName: Smith
                  email: johnSmith@example.com
        '400':
          description: Bad request from validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: 'User validation failed: email: {EMAIL} is not a valid email
                    address'
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The user with id {ID} could not be modified.
    delete:
      tags:
      - users
      summary: Deletes a user
      operationId: deleteUser
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: 'true'
        description: The user id
      responses:
        '200':
          description: Successfully deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                example:
                  _id: 5b31ce106d04832fd1e51f59
        '404':
          description: Document not found. Id does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The document with the specified ID does not exist.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: The user with id ${ID} could not be removed.
components:
  schemas:
    Project:
      title: Project
      required:
        - title
        - members
      properties:
        title:
          description: Descriptive title for project
          type: string
          example: Example Project 1
        description:
          description: Additional details regarding project
          type: string
          example: An example description.
        members:
          description: Array of user id's assigned to project
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da', '5b1ed13e8cea93c6ba72b1db', '5b1ed13e8cea93c6ba72b1dc']
    Task:
      title: Task
      required:
        - project
        - title
      properties:
        project:
          description: Id of existing project that task belongs to
          type: string
          format: objectId
          example: 5b1ed13e8cea93c6ba72b1da
        title:
          description: Descriptive title for task
          type: string
          example: An example task title
        description:
          description: Additional details regarding task
          type: string
          example: An example task description.
        assignee:
          description: Array of user id's assigned to task
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da']
        dueDate:
          description: Date the task is due
          type: string
          format: date
          example: 06/24/2018
        subtasks:
          description: Array of child subtask id's
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da', '5b1ed13e8cea93c6ba72b1db', '5b1ed13e8cea93c6ba72b1dc']
        tags:
          description: Array of tag id's belonging to task
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da', '5b1ed13e8cea93c6ba72b1db', '5b1ed13e8cea93c6ba72b1dc']
        completed:
          description: Task's completed status
          type: Boolean
          example: false
          default: false
        comments:
          description: Array of comment id's belonging to task
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da', '5b1ed13e8cea93c6ba72b1db', '5b1ed13e8cea93c6ba72b1dc']
        attachments:
          description: Array of attachment id's belonging to task
          type: array
          items:
            type: string
            format: objectId
          example: ['5b1ed13e8cea93c6ba72b1da', '5b1ed13e8cea93c6ba72b1db', '5b1ed13e8cea93c6ba72b1dc']
    User:
      title: User
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          description: User's first name
          type: string
          example: John
        lastName:
          description: User's last name
          type: string
          example: Smith
        email:
          description: User's email address
          type: string
          format: email
          example: johnsmith@example.com
        password:
          description: "User's password containing 1 uppercase letter, 1 lowercase
            letter, 1 digit and 1 special character: !, @, #, $, %, &"
          type: string
          format: password
          minLength: 8
          example: Password@1
